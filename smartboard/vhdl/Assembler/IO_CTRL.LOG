KCPSM3 Assembler log file for program 'io_ctrl.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
22Jan2007-10:00:10

 Addr Code

 000                           ;
 000                           ;Version v1.00 - 4th January 2007
 000                           ;
 000                           ;**************************************************************************************
 000                           ;Port definitions
 000                           ;**************************************************************************************
 000                           ;
 000                           ;
 000                           ;A FIFO buffer links the security KCPSM3 processor to the application KCPSM3 processor.
 000                           ;  This application processor controls and reads the FIFO.
 000                           ;  The security processor writes to the FIFO.
 000                           ;
 000                           CONSTANT link_fifo_control_port, 20 ;FIFO control
 000                           CONSTANT link_fifo_reset, 01        ;     reset - bit0
 000                           ;
 000                           CONSTANT link_FIFO_status_port, 02  ;FIFO status input
 000                           CONSTANT link_FIFO_data_present, 01 ;      half full - bit0
 000                           CONSTANT link_FIFO_half_full, 02    ;           full - bit1
 000                           CONSTANT link_FIFO_full, 04         ;   data present - bit2
 000                           ;
 000                           CONSTANT link_FIFO_read_port, 04    ;read FIFO data
 000                           ;
 000                           CONSTANT VALVE_port, 04             ; VALVE output port at 0x4
 000                           ;
 000                           CONSTANT LED_port, 80               ;8 simple LEDs
 000                           CONSTANT LED0, 01                   ;     LED 0 - bit0
 000                           CONSTANT LED1, 02                   ;         1 - bit1
 000                           CONSTANT LED2, 04                   ;         2 - bit2
 000                           CONSTANT LED3, 08                   ;         3 - bit3
 000                           CONSTANT LED4, 10                   ;         4 - bit4
 000                           CONSTANT LED5, 20                   ;         5 - bit5
 000                           CONSTANT LED6, 40                   ;         6 - bit6
 000                           CONSTANT LED7, 80                   ;         7 - bit7
 000                           ;
 000                           ;
 000                           CONSTANT switch_port, 00            ;Read switches and press buttons
 000                           CONSTANT switch0, 01                ;  Switches      SW0 - bit0
 000                           CONSTANT switch1, 02                ;                SW1 - bit1
 000                           CONSTANT switch2, 04                ;                SW2 - bit2
 000                           CONSTANT switch3, 08                ;                SW3 - bit3
 000                           CONSTANT BTN_east, 10               ;  Buttons      East - bit4
 000                           CONSTANT BTN_south, 20              ;              South - bit5
 000                           CONSTANT BTN_north, 40              ;              North - bit6
 000                           CONSTANT BTN_west, 80               ;               West - bit7
 000                           ;
 000                           ;
 000                           CONSTANT rotary_port, 01            ;Read status of rotary encoder
 000                           CONSTANT rotary_left, 01            ; Direction of last move Left=1 Right=0  - bit0
 000                           CONSTANT rotary_press, 02           ;     Centre press contact (active High) - bit1
 000                           ;
 000                           ;
 000                           ;LCD interface ports
 000                           ;
 000                           ;The master enable signal is not used by the LCD display itself
 000                           ;but may be required to confirm that LCD communication is active.
 000                           ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
 000                           ;is used because it shares the same data pins and conflicts must be avoided.
 000                           ;
 000                           CONSTANT LCD_output_port, 40        ;LCD character module output data and control
 000                           CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
 000                           CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
 000                           CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
 000                           CONSTANT LCD_drive, 08              ;   Master enable (active High) - bit3
 000                           CONSTANT LCD_DB4, 10                ;   4-bit              Data DB4 - bit4
 000                           CONSTANT LCD_DB5, 20                ;   interface          Data DB5 - bit5
 000                           CONSTANT LCD_DB6, 40                ;                      Data DB6 - bit6
 000                           CONSTANT LCD_DB7, 80                ;                      Data DB7 - bit7
 000                           ;
 000                           ;
 000                           CONSTANT LCD_input_port, 02         ;LCD character module input data
 000                           CONSTANT LCD_read_spare0, 01        ;    Spare bits               - bit0
 000                           CONSTANT LCD_read_spare1, 02        ;    are zero                 - bit1
 000                           CONSTANT LCD_read_spare2, 04        ;                             - bit2
 000                           CONSTANT LCD_read_spare3, 08        ;                             - bit3
 000                           CONSTANT LCD_read_DB4, 10           ;    4-bit           Data DB4 - bit4
 000                           CONSTANT LCD_read_DB5, 20           ;    interface       Data DB5 - bit5
 000                           CONSTANT LCD_read_DB6, 40           ;                    Data DB6 - bit6
 000                           CONSTANT LCD_read_DB7, 80           ;                    Data DB7 - bit7
 000                           ;
 000                           ;
 000                           ;
 000                           ;**************************************************************************************
 000                           ;Special Register usage
 000                           ;**************************************************************************************
 000                           ;
 000                           ;**************************************************************************************
 000                           ;Scratch Pad Memory Locations
 000                           ;**************************************************************************************
 000                           ;
 000                           CONSTANT rotary_status, 00          ;Status of rotary encoder
 000                           CONSTANT ISR_preserve_s0, 01        ;Preserve s0 contents during ISR
 000                           ;
 000                           CONSTANT LED_pattern, 02            ;LED pattern used in rotation mode
 000                           ;
 000                           CONSTANT mode, 03                   ;control mode 00=switch and button FF=rotary
 000                           ;
 000                           ;
 000                           ;
 000                           ;**************************************************************************************
 000                           ;Useful data constants
 000                           ;**************************************************************************************
 000                           ;
 000                           ;
 000                           ;The main operation of the program uses 1ms delays to set the shift rate
 000                           ;of the LCD display. A 16-bit value determines how many milliseconds
 000                           ;there are between shifts
 000                           ;
 000                           ;Tests indicate that the fastest shift rate that the LCD display supports is
 000                           ;500ms. Faster than this and the display becomes less clear to read.
 000                           ;
 000                           CONSTANT shift_delay_msb, 01        ;delay is 500ms (01F4 hex)
 000                           CONSTANT shift_delay_lsb, F4
 000                           ;
 000                           ;
 000                           ;
 000                           ;
 000                           ;Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                           ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                           ;calculation highly predictable. The '6' in the following equation even allows for
 000                           ;'CALL delay_1us' instruction in the initiating code.
 000                           ;
 000                           ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                           ;
 000                           ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
 000                           ;For clock rates below 10MHz the value of 1 must be used and the operation will
 000                           ;become lower than intended.
 000                           ;
 000                           CONSTANT delay_1us_constant, 0B
 000                           ;
 000                           ;
 000                           ;
 000                           ;ASCII table
 000                           ;
 000                           CONSTANT character_a, 61
 000                           CONSTANT character_b, 62
 000                           CONSTANT character_c, 63
 000                           CONSTANT character_d, 64
 000                           CONSTANT character_e, 65
 000                           CONSTANT character_f, 66
 000                           CONSTANT character_g, 67
 000                           CONSTANT character_h, 68
 000                           CONSTANT character_i, 69
 000                           CONSTANT character_j, 6A
 000                           CONSTANT character_k, 6B
 000                           CONSTANT character_l, 6C
 000                           CONSTANT character_m, 6D
 000                           CONSTANT character_n, 6E
 000                           CONSTANT character_o, 6F
 000                           CONSTANT character_p, 70
 000                           CONSTANT character_q, 71
 000                           CONSTANT character_r, 72
 000                           CONSTANT character_s, 73
 000                           CONSTANT character_t, 74
 000                           CONSTANT character_u, 75
 000                           CONSTANT character_v, 76
 000                           CONSTANT character_w, 77
 000                           CONSTANT character_x, 78
 000                           CONSTANT character_y, 79
 000                           CONSTANT character_z, 7A
 000                           CONSTANT character_A, 41
 000                           CONSTANT character_B, 42
 000                           CONSTANT character_C, 43
 000                           CONSTANT character_D, 44
 000                           CONSTANT character_E, 45
 000                           CONSTANT character_F, 46
 000                           CONSTANT character_G, 47
 000                           CONSTANT character_H, 48
 000                           CONSTANT character_I, 49
 000                           CONSTANT character_J, 4A
 000                           CONSTANT character_K, 4B
 000                           CONSTANT character_L, 4C
 000                           CONSTANT character_M, 4D
 000                           CONSTANT character_N, 4E
 000                           CONSTANT character_O, 4F
 000                           CONSTANT character_P, 50
 000                           CONSTANT character_Q, 51
 000                           CONSTANT character_R, 52
 000                           CONSTANT character_S, 53
 000                           CONSTANT character_T, 54
 000                           CONSTANT character_U, 55
 000                           CONSTANT character_V, 56
 000                           CONSTANT character_W, 57
 000                           CONSTANT character_X, 58
 000                           CONSTANT character_Y, 59
 000                           CONSTANT character_Z, 5A
 000                           CONSTANT character_0, 30
 000                           CONSTANT character_1, 31
 000                           CONSTANT character_2, 32
 000                           CONSTANT character_3, 33
 000                           CONSTANT character_4, 34
 000                           CONSTANT character_5, 35
 000                           CONSTANT character_6, 36
 000                           CONSTANT character_7, 37
 000                           CONSTANT character_8, 38
 000                           CONSTANT character_9, 39
 000                           CONSTANT character_colon, 3A
 000                           CONSTANT character_stop, 2E
 000                           CONSTANT character_semi_colon, 3B
 000                           CONSTANT character_minus, 2D
 000                           CONSTANT character_divide, 2F       ;'/'
 000                           CONSTANT character_plus, 2B
 000                           CONSTANT character_comma, 2C
 000                           CONSTANT character_less_than, 3C
 000                           CONSTANT character_greater_than, 3E
 000                           CONSTANT character_equals, 3D
 000                           CONSTANT character_space, 20
 000                           CONSTANT character_CR, 0D           ;carriage return
 000                           CONSTANT character_question, 3F     ;'?'
 000                           CONSTANT character_dollar, 24
 000                           CONSTANT character_exclaim, 21      ;'!'
 000                           CONSTANT character_BS, 08           ;Back Space command character
 000                           ;
 000                           ;
 000                           ;
 000                           ;
 000                           ;
 000                           ;**************************************************************************************
 000                           ;Initialise the system
 000                           ;**************************************************************************************
 000                           ;
 000               cold_start: ;CALL LCD_reset                      ;initialise LCD display
 000                           ;ENABLE INTERRUPT
 000                           ;
 000                           ;Write welcome message to LCD display
 000                           ;
 000                           ;LOAD s5, 10                         ;Line 1 position 0
 000                           ;CALL LCD_cursor
 000                           ;CALL disp_SPARTAN                   ;Display 'SPARTAN-3E STARTER KIT'
 000                           ;LOAD s5, 2E                         ;Line 2 position 14
 000                           ;CALL LCD_cursor
 000                           ;CALL disp_www                       ;Display 'www.xilinx.com/s3estarter'
 000                           ;
 000                           ;LOAD s0, 08                         ;initialise walking '1' pattern
 000                           ;STORE s0, LED_pattern
 000                           ;
 000                           ;LOAD sD, FF                         ;initial mode is rotary control
 000                           ;STORE sD, mode
 000                           ;
 000                           ;**************************************************************************************
 000                           ;Main program
 000                           ;**************************************************************************************
 000                           ;
 000                           ;The main program is responsible for continuously shifting the LCD display
 000                           ;at 0.5 second intervals. It also polls the centre press button of the rotary
 000                           ;encoder to determine which mode of LED control should be active.
 000                           ;
 000                           ;
 000  00F01   LCD_shift_delay: LOAD sF, shift_delay_msb[01]        ; [sF,sE]=loop delay in ms
 001  00EF4                    LOAD sE, shift_delay_lsb[F4]
 002           LCD_delay_loop: ;INPUT s0, rotary_port               ;test for press of rotary
 002                           ;TEST s0, rotary_press
 002                           ;JUMP NZ, mode_switch
 002                           ;FETCH sD, mode                      ;perform control task required
 002                           ;COMPARE sD, 00
 002                           ;CALL Z, normal_mode
 002                           ;COMPARE sD, FF
 002                           ;CALL Z, rotate_mode
 002                           ;CALL delay_1ms                      ;1ms delay
 002                           ;SUB sE, 01                          ;decrement delay counter
 002                           ;SUBCY sF, 00
 002                           ;JUMP NC, LCD_delay_loop
 002                           ;CALL LCD_shift_left                 ;shift LCD display
 002  34000                    JUMP LCD_shift_delay[000]
 003                           ;
 003  0EDFF       mode_switch: XOR sD, FF                          ;toggle mode
 004  2ED03                    STORE sD, mode[03]
 005  30077  wait_mode_switch: CALL delay_1ms[077]                 ;keep shifting LCD display while waiting
 006  1CE01                    SUB sE, 01
 007  1EF00                    SUBCY sF, 00
 008  35C0C                    JUMP NC, wait_no_shift[00C]
 009  300E9                    CALL LCD_shift_left[0E9]            ;shift LCD display
 00A  00F01                    LOAD sF, shift_delay_msb[01]        ; [sF,sE]=loop delay in ms
 00B  00EF4                    LOAD sE, shift_delay_lsb[F4]
 00C  04001     wait_no_shift: INPUT s0, rotary_port[01]           ;wait for release of press button
 00D  12002                    TEST s0, rotary_press[02]
 00E  35405                    JUMP NZ, wait_mode_switch[005]
 00F  34002                    JUMP LCD_delay_loop[002]
 010                           ;
 010                           ;This procedure will copy the condition of the slide switches and press
 010                           ;buttons to the LEDs.
 010                           ;
 010                           ;
 010  04000       normal_mode: INPUT s0, switch_port[00]           ;Read switches and buttons and directly drive LEDs
 011  2C080                    OUTPUT s0, LED_port[80]
 012  2A000                    RETURN
 013                           ;
 013                           ;
 013                           ;
 013                           ;This procedure will poll the status of the rotary encoder.
 013                           ;If rotation occurs, then the LED pattern will adjust appropriately.
 013                           ;
 013  06A02       rotate_mode: FETCH sA, LED_pattern[02]           ;last known position
 014  06000                    FETCH s0, rotary_status[00]         ;check status of rotation
 015  12080                    TEST s0, 80                         ;test flag
 016  3501E                    JUMP Z, update_pattern[01E]
 017  0A07F                    AND s0, 7F                          ;clear flag
 018  2E000                    STORE s0, rotary_status[00]
 019  12001                    TEST s0, rotary_left[01]            ;event occurred so update pattern
 01A  3501D                    JUMP Z, move_right[01D]
 01B  20A02                    RL sA
 01C  3401E                    JUMP update_pattern[01E]
 01D  20A0C        move_right: RR sA
 01E  2EA02    update_pattern: STORE sA, LED_pattern[02]
 01F  2CA80                    OUTPUT sA, LED_port[80]             ;drive LEDs with current pattern
 020  2A000                    RETURN
 021                           ;
 021                           ;
 021                           ;
 021                           ;
 021                           ;**************************************************************************************
 021                           ;LCD text messages
 021                           ;**************************************************************************************
 021                           ;
 021                           ;
 021                           ;Display 'SPARTAN-3E STARTER KIT' on LCD at current cursor position
 021                           ;
 021                           ;
 021  00553      disp_SPARTAN: LOAD s5, character_S[53]
 022  3009F                    CALL LCD_write_data[09F]
 023  0054D                    LOAD s5, character_M[4D]
 024  3009F                    CALL LCD_write_data[09F]
 025  00541                    LOAD s5, character_A[41]
 026  3009F                    CALL LCD_write_data[09F]
 027  00552                    LOAD s5, character_R[52]
 028  3009F                    CALL LCD_write_data[09F]
 029  00554                    LOAD s5, character_T[54]
 02A  3009F                    CALL LCD_write_data[09F]
 02B  00542                    LOAD s5, character_B[42]
 02C  3009F                    CALL LCD_write_data[09F]
 02D  0054F                    LOAD s5, character_O[4F]
 02E  3009F                    CALL LCD_write_data[09F]
 02F  00541                    LOAD s5, character_A[41]
 030  3009F                    CALL LCD_write_data[09F]
 031  00552                    LOAD s5, character_R[52]
 032  3009F                    CALL LCD_write_data[09F]
 033  00544                    LOAD s5, character_D[44]
 034  3009F                    CALL LCD_write_data[09F]
 035  2A000                    RETURN
 036                           ;
 036                           ;
 036                           ;Display 'www.xilinx.com/s3estarter' on LCD at current cursor position
 036                           ;
 036                           ;
 036  00577          disp_www: LOAD s5, character_w[77]
 037  3009F                    CALL LCD_write_data[09F]
 038  00577                    LOAD s5, character_w[77]
 039  3009F                    CALL LCD_write_data[09F]
 03A  00577                    LOAD s5, character_w[77]
 03B  3009F                    CALL LCD_write_data[09F]
 03C  0052E                    LOAD s5, character_stop[2E]
 03D  3009F                    CALL LCD_write_data[09F]
 03E  00561                    LOAD s5, character_a[61]
 03F  3009F                    CALL LCD_write_data[09F]
 040  00572                    LOAD s5, character_r[72]
 041  3009F                    CALL LCD_write_data[09F]
 042  0056C                    LOAD s5, character_l[6C]
 043  3009F                    CALL LCD_write_data[09F]
 044  00579                    LOAD s5, character_y[79]
 045  3009F                    CALL LCD_write_data[09F]
 046  00573                    LOAD s5, character_s[73]
 047  3009F                    CALL LCD_write_data[09F]
 048  00563                    LOAD s5, character_c[63]
 049  3009F                    CALL LCD_write_data[09F]
 04A  00561                    LOAD s5, character_a[61]
 04B  3009F                    CALL LCD_write_data[09F]
 04C  0056C                    LOAD s5, character_l[6C]
 04D  3009F                    CALL LCD_write_data[09F]
 04E  00565                    LOAD s5, character_e[65]
 04F  3009F                    CALL LCD_write_data[09F]
 050  00573                    LOAD s5, character_s[73]
 051  3009F                    CALL LCD_write_data[09F]
 052  0052E                    LOAD s5, character_stop[2E]
 053  3009F                    CALL LCD_write_data[09F]
 054  00563                    LOAD s5, character_c[63]
 055  3009F                    CALL LCD_write_data[09F]
 056  0056F                    LOAD s5, character_o[6F]
 057  3009F                    CALL LCD_write_data[09F]
 058  0056D                    LOAD s5, character_m[6D]
 059  3009F                    CALL LCD_write_data[09F]
 05A  0052F                    LOAD s5, character_divide[2F]
 05B  3009F                    CALL LCD_write_data[09F]
 05C  00569                    LOAD s5, character_i[69]
 05D  3009F                    CALL LCD_write_data[09F]
 05E  0056F                    LOAD s5, character_o[6F]
 05F  3009F                    CALL LCD_write_data[09F]
 060  00562                    LOAD s5, character_b[62]
 061  3009F                    CALL LCD_write_data[09F]
 062  0056F                    LOAD s5, character_o[6F]
 063  3009F                    CALL LCD_write_data[09F]
 064  00561                    LOAD s5, character_a[61]
 065  3009F                    CALL LCD_write_data[09F]
 066  00572                    LOAD s5, character_r[72]
 067  3009F                    CALL LCD_write_data[09F]
 068  00564                    LOAD s5, character_d[64]
 069  3009F                    CALL LCD_write_data[09F]
 06A  2A000                    RETURN
 06B                           ;
 06B                           ;Display a space on LCD at current cursor position
 06B                           ;
 06B                           ;
 06B  00520        disp_space: LOAD s5, character_space[20]
 06C  3009F                    CALL LCD_write_data[09F]
 06D  2A000                    RETURN
 06E                           ;
 06E                           ;
 06E                           ;
 06E                           ;
 06E                           ;**************************************************************************************
 06E                           ;Software delay routines
 06E                           ;**************************************************************************************
 06E                           ;
 06E                           ;
 06E                           ;
 06E                           ;Delay of 1us.
 06E                           ;
 06E                           ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
 06E                           ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
 06E                           ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
 06E                           ;
 06E                           ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 06E                           ;
 06E                           ;Registers used s0
 06E                           ;
 06E  0000B         delay_1us: LOAD s0, delay_1us_constant[0B]
 06F  1C001          wait_1us: SUB s0, 01
 070  3546F                    JUMP NZ, wait_1us[06F]
 071  2A000                    RETURN
 072                           ;
 072                           ;Delay of 40us.
 072                           ;
 072                           ;Registers used s0, s1
 072                           ;
 072  00128        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 073  3006E         wait_40us: CALL delay_1us[06E]
 074  1C101                    SUB s1, 01
 075  35473                    JUMP NZ, wait_40us[073]
 076  2A000                    RETURN
 077                           ;
 077                           ;
 077                           ;Delay of 1ms.
 077                           ;
 077                           ;Registers used s0, s1, s2
 077                           ;
 077  00219         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 078  30072          wait_1ms: CALL delay_40us[072]
 079  1C201                    SUB s2, 01
 07A  35478                    JUMP NZ, wait_1ms[078]
 07B  2A000                    RETURN
 07C                           ;
 07C                           ;Delay of 20ms.
 07C                           ;
 07C                           ;Delay of 20ms used during initialisation.
 07C                           ;
 07C                           ;Registers used s0, s1, s2, s3
 07C                           ;
 07C  00314        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 07D  30077         wait_20ms: CALL delay_1ms[077]
 07E  1C301                    SUB s3, 01
 07F  3547D                    JUMP NZ, wait_20ms[07D]
 080  2A000                    RETURN
 081                           ;
 081                           ;Delay of approximately 1 second.
 081                           ;
 081                           ;Registers used s0, s1, s2, s3, s4
 081                           ;
 081  00432          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 082  3007C           wait_1s: CALL delay_20ms[07C]
 083  1C401                    SUB s4, 01
 084  35482                    JUMP NZ, wait_1s[082]
 085  2A000                    RETURN
 086                           ;
 086                           ;
 086                           ;
 086                           ;**************************************************************************************
 086                           ;LCD Character Module Routines
 086                           ;**************************************************************************************
 086                           ;
 086                           ;LCD module is a 16 character by 2 line display but all displays are very similar
 086                           ;The 4-wire data interface will be used (DB4 to DB7).
 086                           ;
 086                           ;The LCD modules are relatively slow and software delay loops are used to slow down
 086                           ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
 086                           ;a different section (see above in this case).
 086                           ;
 086                           ;
 086                           ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
 086                           ;
 086                           ;Register s4 should define the current state of the LCD output port.
 086                           ;
 086                           ;Registers used s0, s4
 086                           ;
 086  0E401       LCD_pulse_E: XOR s4, LCD_E[01]                   ;E=1
 087  2C440                    OUTPUT s4, LCD_output_port[40]
 088  3006E                    CALL delay_1us[06E]
 089  0E401                    XOR s4, LCD_E[01]                   ;E=0
 08A  2C440                    OUTPUT s4, LCD_output_port[40]
 08B  2A000                    RETURN
 08C                           ;
 08C                           ;Write 4-bit instruction to LCD display.
 08C                           ;
 08C                           ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
 08C                           ;Note that this routine does not release the master enable but as it is only
 08C                           ;used during initialisation and as part of the 8-bit instruction write it
 08C                           ;should be acceptable.
 08C                           ;
 08C                           ;Registers used s4
 08C                           ;
 08C  0A4F8   LCD_write_inst4: AND s4, F8                          ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
 08D  2C440                    OUTPUT s4, LCD_output_port[40]      ;set up RS and RW >40ns before enable pulse
 08E  30086                    CALL LCD_pulse_E[086]
 08F  2A000                    RETURN
 090                           ;
 090                           ;
 090                           ;Write 8-bit instruction to LCD display.
 090                           ;
 090                           ;The 8-bit instruction should be provided in register s5.
 090                           ;Instructions are written using the following sequence
 090                           ; Upper nibble
 090                           ; wait >1us
 090                           ; Lower nibble
 090                           ; wait >40us
 090                           ;
 090                           ;Registers used s0, s1, s4, s5
 090                           ;
 090  01450   LCD_write_inst8: LOAD s4, s5
 091  0A4F0                    AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
 092  0C408                    OR s4, LCD_drive[08]                ;Enable=1
 093  3008C                    CALL LCD_write_inst4[08C]           ;write upper nibble
 094  3006E                    CALL delay_1us[06E]                 ;wait >1us
 095  01450                    LOAD s4, s5                         ;select lower nibble with
 096  20407                    SL1 s4                              ;Enable=1
 097  20406                    SL0 s4                              ;RS=0 Instruction
 098  20406                    SL0 s4                              ;RW=0 Write
 099  20406                    SL0 s4                              ;E=0
 09A  3008C                    CALL LCD_write_inst4[08C]           ;write lower nibble
 09B  30072                    CALL delay_40us[072]                ;wait >40us
 09C  004F0                    LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
 09D  2C440                    OUTPUT s4, LCD_output_port[40]      ;Release master enable
 09E  2A000                    RETURN
 09F                           ;
 09F                           ;
 09F                           ;
 09F                           ;Write 8-bit data to LCD display.
 09F                           ;
 09F                           ;The 8-bit data should be provided in register s5.
 09F                           ;Data bytes are written using the following sequence
 09F                           ; Upper nibble
 09F                           ; wait >1us
 09F                           ; Lower nibble
 09F                           ; wait >40us
 09F                           ;
 09F                           ;Registers used s0, s1, s4, s5
 09F                           ;
 09F  01450    LCD_write_data: LOAD s4, s5
 0A0  0A4F0                    AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
 0A1  0C40C                    OR s4, 0C                           ;Enable=1 RS=1 Data, RW=0 Write, E=0
 0A2  2C440                    OUTPUT s4, LCD_output_port[40]      ;set up RS and RW >40ns before enable pulse
 0A3  30086                    CALL LCD_pulse_E[086]               ;write upper nibble
 0A4  3006E                    CALL delay_1us[06E]                 ;wait >1us
 0A5  01450                    LOAD s4, s5                         ;select lower nibble with
 0A6  20407                    SL1 s4                              ;Enable=1
 0A7  20407                    SL1 s4                              ;RS=1 Data
 0A8  20406                    SL0 s4                              ;RW=0 Write
 0A9  20406                    SL0 s4                              ;E=0
 0AA  2C440                    OUTPUT s4, LCD_output_port[40]      ;set up RS and RW >40ns before enable pulse
 0AB  30086                    CALL LCD_pulse_E[086]               ;write lower nibble
 0AC  30072                    CALL delay_40us[072]                ;wait >40us
 0AD  004F0                    LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
 0AE  2C440                    OUTPUT s4, LCD_output_port[40]      ;Release master enable
 0AF  2A000                    RETURN
 0B0                           ;
 0B0                           ;
 0B0                           ;
 0B0                           ;
 0B0                           ;Read 8-bit data from LCD display.
 0B0                           ;
 0B0                           ;The 8-bit data will be read from the current LCD memory address
 0B0                           ;and will be returned in register s5.
 0B0                           ;It is advisable to set the LCD address (cursor position) before
 0B0                           ;using the data read for the first time otherwise the display may
 0B0                           ;generate invalid data on the first read.
 0B0                           ;
 0B0                           ;Data bytes are read using the following sequence
 0B0                           ; Upper nibble
 0B0                           ; wait >1us
 0B0                           ; Lower nibble
 0B0                           ; wait >40us
 0B0                           ;
 0B0                           ;Registers used s0, s1, s4, s5
 0B0                           ;
 0B0  0040E    LCD_read_data8: LOAD s4, 0E                         ;Enable=1 RS=1 Data, RW=1 Read, E=0
 0B1  2C440                    OUTPUT s4, LCD_output_port[40]      ;set up RS and RW >40ns before enable pulse
 0B2  0E401                    XOR s4, LCD_E[01]                   ;E=1
 0B3  2C440                    OUTPUT s4, LCD_output_port[40]
 0B4  3006E                    CALL delay_1us[06E]                 ;wait >260ns to access data
 0B5  04502                    INPUT s5, LCD_input_port[02]        ;read upper nibble
 0B6  0E401                    XOR s4, LCD_E[01]                   ;E=0
 0B7  2C440                    OUTPUT s4, LCD_output_port[40]
 0B8  3006E                    CALL delay_1us[06E]                 ;wait >1us
 0B9  0E401                    XOR s4, LCD_E[01]                   ;E=1
 0BA  2C440                    OUTPUT s4, LCD_output_port[40]
 0BB  3006E                    CALL delay_1us[06E]                 ;wait >260ns to access data
 0BC  04002                    INPUT s0, LCD_input_port[02]        ;read lower nibble
 0BD  0E401                    XOR s4, LCD_E[01]                   ;E=0
 0BE  2C440                    OUTPUT s4, LCD_output_port[40]
 0BF  0A5F0                    AND s5, F0                          ;merge upper and lower nibbles
 0C0  2000E                    SR0 s0
 0C1  2000E                    SR0 s0
 0C2  2000E                    SR0 s0
 0C3  2000E                    SR0 s0
 0C4  0D500                    OR s5, s0
 0C5  00404                    LOAD s4, 04                         ;Enable=0 RS=1 Data, RW=0 Write, E=0
 0C6  2C440                    OUTPUT s4, LCD_output_port[40]      ;Stop reading 5V device and release master enable
 0C7  30072                    CALL delay_40us[072]                ;wait >40us
 0C8  2A000                    RETURN
 0C9                           ;
 0C9                           ;
 0C9                           ;Reset and initialise display to communicate using 4-bit data mode
 0C9                           ;Includes routine to clear the display.
 0C9                           ;
 0C9                           ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
 0C9                           ;following by the 8-bit instructions to set up the display.
 0C9                           ;
 0C9                           ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
 0C9                           ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
 0C9                           ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
 0C9                           ;  01 = '00000001' Display clear
 0C9                           ;
 0C9                           ;Registers used s0, s1, s2, s3, s4
 0C9                           ;
 0C9  3007C         LCD_reset: CALL delay_20ms[07C]                ;wait more that 15ms for display to be ready
 0CA  00430                    LOAD s4, 30
 0CB  3008C                    CALL LCD_write_inst4[08C]           ;send '3'
 0CC  3007C                    CALL delay_20ms[07C]                ;wait >4.1ms
 0CD  3008C                    CALL LCD_write_inst4[08C]           ;send '3'
 0CE  30077                    CALL delay_1ms[077]                 ;wait >100us
 0CF  3008C                    CALL LCD_write_inst4[08C]           ;send '3'
 0D0  30072                    CALL delay_40us[072]                ;wait >40us
 0D1  00420                    LOAD s4, 20
 0D2  3008C                    CALL LCD_write_inst4[08C]           ;send '2'
 0D3  30072                    CALL delay_40us[072]                ;wait >40us
 0D4  00528                    LOAD s5, 28                         ;Function set
 0D5  30090                    CALL LCD_write_inst8[090]
 0D6  00506                    LOAD s5, 06                         ;Entry mode
 0D7  30090                    CALL LCD_write_inst8[090]
 0D8  0050C                    LOAD s5, 0C                         ;Display control
 0D9  30090                    CALL LCD_write_inst8[090]
 0DA  00501         LCD_clear: LOAD s5, 01                         ;Display clear
 0DB  30090                    CALL LCD_write_inst8[090]
 0DC  30077                    CALL delay_1ms[077]                 ;wait >1.64ms for display to clear
 0DD  30077                    CALL delay_1ms[077]
 0DE  2A000                    RETURN
 0DF                           ;
 0DF                           ;Position the cursor ready for characters to be written.
 0DF                           ;The display is formed of 2 lines of 16 characters and each
 0DF                           ;position has a corresponding address as indicated below.
 0DF                           ;
 0DF                           ;                   Character position
 0DF                           ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
 0DF                           ;
 0DF                           ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
 0DF                           ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
 0DF                           ;
 0DF                           ;This routine will set the cursor position using the value provided
 0DF                           ;in register s5. The upper nibble will define the line and the lower
 0DF                           ;nibble the character position on the line.
 0DF                           ; Example s5 = 2B will position the cursor on line 2 position 11
 0DF                           ;
 0DF                           ;Registers used s0, s1, s2, s3, s4
 0DF                           ;
 0DF  12510        LCD_cursor: TEST s5, 10                         ;test for line 1
 0E0  350E5                    JUMP Z, set_line2[0E5]
 0E1  0A50F                    AND s5, 0F                          ;make address in range 80 to 8F for line 1
 0E2  0C580                    OR s5, 80
 0E3  30090                    CALL LCD_write_inst8[090]           ;instruction write to set cursor
 0E4  2A000                    RETURN
 0E5  0A50F         set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
 0E6  0C5C0                    OR s5, C0
 0E7  30090                    CALL LCD_write_inst8[090]           ;instruction write to set cursor
 0E8  2A000                    RETURN
 0E9                           ;
 0E9                           ;This routine will shift the complete display one position to the left.
 0E9                           ;The cursor position and LCD memory contents will not change.
 0E9                           ;
 0E9                           ;
 0E9                           ;Registers used s0, s1, s2, s3, s4, s5
 0E9                           ;
 0E9  00518    LCD_shift_left: LOAD s5, 18                         ;shift display left
 0EA  30090                    CALL LCD_write_inst8[090]
 0EB  2A000                    RETURN
 0EC                           ;
 0EC                           ;**************************************************************************************
 0EC                           ;Interrupt Service Routine (ISR)
 0EC                           ;**************************************************************************************
 0EC                           ;
 0EC                           ;Interrupts occur when the rotary control has been moved.
 0EC                           ;
 0EC                           ;The ISR captures the state of the direction which it writes to scratch pad memory (SPM).
 0EC                           ;The most significant bit is also set at this location to provide a 'flag' to the
 0EC                           ;main body of the program.
 0EC                           ;
 0EC                           ;If the main program is not in rotation mode then the ISR effectively ignores the
 0EC                           ;event although the hardware interface will be cleared by the interrupt_ack signal.
 0EC                           ;This prevents a rotation event which has been made during normal switch and button
 0EC                           ;mode from having any effect.
 0EC                           ;
 0EC                           ;ISR: STORE s0, ISR_preserve_s0           ;preserve s0
 0EC                           ;FETCH s0, mode                      ;test operation mode
 0EC                           ;COMPARE s0, 00                      ;ignore events under normal mode
 0EC                           ;JUMP Z, end_ISR
 0EC                           ;INPUT s0, rotary_port               ;read rotary encoder
 0EC                           ;OR s0, 80                           ;set flag
 0EC                           ;STORE s0, rotary_status             ;put result in SCM
 0EC                           ;end_ISR: FETCH s0, ISR_preserve_s0           ;restore s0
 0EC                           ;RETURNI ENABLE
 0EC                           ;
 0EC                           ;
 0EC                           ;**************************************************************************************
 0EC                           ;Interrupt Vector
 0EC                           ;**************************************************************************************
 0EC                           ;
 0EC                           ;ADDRESS 3FF
 0EC                           ;JUMP ISR
 0EC                           ;
 0EC                           ;
